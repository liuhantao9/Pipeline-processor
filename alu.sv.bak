module alu(.A, .B, .cntrl, .result, .negative, .zero, .overflow, .carry_out);
	output logic negative, zero, overflow, carry_out;
	output logic [63:0] result;
	input logic [63:0] A, B;
	input logic [2:0] cntrl;
	logic [7:0] mux_in;
	logic carry_pass[63:0];
	
	
	single_alu zero_bit (.out(result[0]), .carryout(carry_pass[0]), 
								.carryin(cntrl[0]), .a_in(A[0]), .b_in(B[0]), .control(cntrl));
	genvar i;
	generate
	for (i = 1; i < 64; i++) begin: eachalu
		single_alu zero_bit (.out(result[i]), .carryout(carry_pass[i]), 
									.carryin(carry_pass[i-1]), .a_in(A[i]), .b_in(B[i]), .control(cntrl));
	end
	endgenerate
	
	assign carry_out = carry_pass[63];
	assign negative = result[63];
	nor <zero_flag> (zero, result[63:0]);
	xor <overflow_flag> (overflow,carry_out,carry_pass[62]);
endmodule