module single_alu(out, zero, overflow, carryout, negative, a_in, b_in, control);
	output logic out, zero, overflow, carryout, negative;
	input logic carryin, a_in, b_in;
	input logic [2:0] control;
	logic [7:0] mux_in;
	logic b_mod;
	
	mux2_1 add_subtr_control (.out(b_mod), .i0(b_in), .i1(~b_in), .sel(control[0]));
	add_subtr_unit ad_sub_unit(.out(mux_in[2]), .carryout, .carryin(control[0]), a_in, b_in(b_mod)); // 0-bit adder for now
	
	assign mux_in[2] = mux_in[3];
	assign mux_in[0] = b_in;
	and ab_and (mux_in[4], a_in, b_in);
	or ab_or (mux_in[5], a_in, b_in);
	xor ab_xor (mux_in[6], a_in, b_in);
		
	mux8_1 alu_connect (.out, .in(mux_in), .control);	
endmodule